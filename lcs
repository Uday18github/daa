#include<stdio.h>
#include<string.h>

int max(int a, int b);

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
	int L[m+1][n+1];
	int i, j;

   /* Following steps build L[m+1][n+1] in bottom up fashion. Note
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */

	 for (i=0; i<=m; i++)
	{
		for (j=0; j<=n; j++)
		{
			if (i == 0 || j == 0)
			L[i][j] = 0;

			else if (X[i-1] == Y[j-1])
			L[i][j] = L[i-1][j-1] + 1;

			else
			L[i][j] = max(L[i-1][j], L[i][j-1]);
		}
	}

	int index = L[m][n];
	char lcs[index + 1];
	lcs[index] = '\0';

	i = m;
	j = n;
	while (i > 0 && j > 0)
	{
		if (X[i - 1] == Y[j - 1])
		{
			lcs[index - 1] = X[i - 1];
			 i--;
			j--;
			index--;
		}

		else if (L[i - 1][j] > L[i][j - 1])
			 i--;
		else
			 j--;
	 }

	// Printing the sub sequences
	printf("String1 : %s \nString2 : %s \n", X, Y);
	printf("\nLCS: %s", lcs);

	/* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
	 return L[m][n];
}

/* Utility function to get max of 2 integers */
int max(int a, int b)
{
	return (a > b)? a : b;
}

/* Driver program to test above function */
int main()
{
	char X[] = "AGGTAB";
	char Y[] = "GXTXAYB";

	int m = strlen(X);
	int n = strlen(Y);

	printf("\nLength of LCS is %d\n", lcs( X, Y, m, n ) );

	return 0;
}
Output
String1 : AGGTAB
String2 : GXTXAYB

LCS: GTAB
Length of LCS is 4

